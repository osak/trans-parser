(()=>{"use strict";class t{constructor(t,e,n,o){this.context=t,this.original=e,this.faceGraphic=n,this.dummyTranslation=o}}let e;async function n(){const t=document.getElementById("input").files[0],n=await t.text();e=JSON.parse(n),function(){if(null==e)throw new Error("trans is not loaded");let t=document.createElement("ul");Object.keys(e.project.files).forEach((n=>{const r=document.createElement("a");r.href="#",r.innerText=n,r.onclick=t=>{t.preventDefault(),function(t){if(null==e)throw new Error("trans is not loaded");let n="<table border>";n+="<tr><th>テキストID</th><th>テキスト</th><th>顔グラ情報</th><th>仮翻訳</th></tr>";for(const e of o(t))n+=`<tr><td>${e.context}</td><td>${e.original}</td><td>${e.faceGraphic}</td><td>${e.dummyTranslation}</td></tr>`;n+="</table>";const r=document.getElementById("preview");r.innerHTML=n;const c=document.createElement("button");c.innerText="TSVをダウンロード",c.onclick=()=>function(t){let e="";for(const n of o(t))e+=`${n.context}\t"${n.original}"\t${n.faceGraphic}\t${n.dummyTranslation}\n`;const n=t.match(/.*\/([^\/.]+).*$/);if(null==n||n.length<2)throw new Error("failed to parse file id");const r=n[1],c=document.createElement("a"),l=new Blob([e],{type:"text/tsv"}),i=window.URL.createObjectURL(l);c.href=i,c.download=`${r}.tsv`,document.body.appendChild(c),c.click(),document.body.removeChild(c),window.URL.revokeObjectURL(i)}(t),r.insertBefore(c,r.firstChild)}(n)};const c=document.createElement("li");c.appendChild(r),t.appendChild(c)})),document.getElementById("mapList").replaceChildren(t)}()}function*o(n){if(null==e)throw new Error("trans is not loaded");const o=e.project.files[n];if(null==o)throw new Error(`${n} does not exist`);for(let e=0;e<o.data.length;++e){const n=o.data[e][0],r=o.data[e][1];if(null!=n)for(let c=0;c<o.context[e].length;++c){const l=o.context[e][c],i=o.parameters[e];let d="";null!=i&&(d=JSON.stringify(i[c].p)),yield new t(l,n,d,r)}}}document.addEventListener("DOMContentLoaded",(()=>{document.getElementById("input").onchange=n}))})();